services:
  postgres:
    image: postgres:16.3-alpine3.20
    environment:
      POSTGRES_USER: store
      POSTGRES_PASSWORD: store
      POSTGRES_DB: store
    volumes:
      - postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "$${POSTGRES_DB}", "-U", "$${POSTGRES_USER}" ]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  simulator-redis:
    image: redis:7.2.5-alpine3.19
    expose:
      - 6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  simulator:
    image: simulator/convenience-store:0.3
    build:
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB_HOST: postgres
      POSTGRES_DB_PORT: 5432
      POSTGRES_DB_NAME: store
      POSTGRES_DB_USERNAME: store
      POSTGRES_DB_PASSWORD: store
      BROKER_URL: redis://:@simulator-redis:6379/0
    env_file:
      - simulator.env
    volumes:
      - simulator-data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      simulator-redis:
        condition: service_healthy
    entrypoint: /bin/sh
    command:
      - -c
      - |
        export SEED=$${INITIAL_SEED:-}

        if [ -e "/app/data/simulator/simulator.json" ]; then
          echo "Simulator has already exists."

        else
          echo "Initializing simulator..."
          if [ -z "$${SEED}" ]; then
            python -m simulator init
          else
            python -m simulator init --seed=$${SEED}
          fi

          if [ $? -eq 0 ]; then
            echo "Succefully initialize simulator."
          else
            echo "An error was occured during while initializing the simulator.."
            exit 1
          fi
        fi

        python -m simulator run --speed=$${SIMULATOR_SPEED:-1.0} --interval=${SIMULATOR_INTERVAL:-1} --checkpoint=${SIMULATOR_CHECKPOINT:-monthly} --workers=$${SIMULATOR_WORKERS:-0}

volumes:
  postgres-db:
  simulator-data:
